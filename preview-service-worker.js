/*! For license information please see preview-service-worker.js.LICENSE.txt */
(()=>{"use strict";var e={50151:(e,t,s)=>{s.d(t,{CY:()=>i,Sl:()=>r});const i=location.host.endsWith(".github.io")?location.pathname:"/",r="PreviewCache"}},t={};function s(i){var r=t[i];if(void 0!==r)return r.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,s),n.exports}s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{class e{constructor(e,t,s,i){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(this.target=null,this.type=t,this.listener=s,this.options=i,"string"==typeof e||e instanceof String){if(this.target=document.getElementById(r+e),!this.target)throw new Error(`Unable to find element ${r}${e}!`)}else this.target=e;if(!this.target)throw new Error(`Undefined event target: ${this.target}!`);if("function"!=typeof s)throw new Error(`Listener is not a function: ${s}!`)}}class t{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Events",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;this.name=e||"",this.prefix=t||"",this.scope=s,this.listener_=[]}listen(t,s,i){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const l=new e(t,s,this.scope?i.bind(this.scope):i,{capture:r,once:n,passive:o},this.prefix);return l.target?(l.target.addEventListener(l.type,l.listener,l.options),this.listener_.push(l)-1):(console.warn("Unable to find event target: ",t),null)}listenOnce(e,t,s){let i=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],n=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return this.listen(e,t,s,i,r,n)}unlisten(e){const t=this.listener_[e];if(!t)throw new Error(`Unknown listener key: ${e}!`);const{target:s,type:i,listener:r,options:n}=t;s.removeEventListener(i,r,n),delete this.listener_[e]}getLength(){return this.listener_.length-1}}const i="install",r="activate",n="fetch";var o=s(50151);class l{constructor(){this.prefix="[Preview Service]",this.events=new t("Service Worker: Preview","",this),this.registered=!1,this.allowList=location.host.endsWith(".github.io")?/^(http|https):\/\/([^/]+)\/([^/]+)\/preview\/[^/]+\/?/:/^(http|https):\/\/([^/]+)\/preview\/[^/]+\/?/,this.counter=0}register(){this.registered?console.warn(`${this.prefix} Service Worker is already registered !`):(console.log(`${this.prefix} Add event listener ...`),this.events.listen(self,r,this.activate),this.events.listen(self,i,this.install),this.events.listen(self,n,this.fetch),this.registered=!0,console.log(`${this.prefix} Registered Service Worker with cache ${o.Sl} ...`))}activate(e){console.log(`${this.prefix} Activate Service Worker ...`,e)}install(){console.log(`${this.prefix} Install Service Worker ...`)}fetch(e){if(null!=e.request&&this.allowList.test(e.request.url))if("POST"===e.request.method)e.respondWith(caches.open(o.Sl).then((t=>e.request.text().then((s=>{const i=new Response(s);return t.put(e.request,i.clone()),i})))));else if("GET"===e.request.method){if(e.request.url.endsWith(o.CY+"preview/test123"))return void e.respondWith(new Response("Hello World! "+this.counter++));e.respondWith(caches.match(e.request).then((e=>e||new Response("Not found"))))}}static async saveHTMLFile(e,t){return l.saveFile(e,t,"text/html; charset=utf-8")}static async saveFile(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"text/plain; charset=utf-8";e.startsWith(o.CY+"preview/")||(e=e.startsWith(o.CY)?e.slice(o.CY.length)+o.CY+"preview"+e:o.CY+"preview/"+e);const i=await caches.open(o.Sl),r=e,n=new Response(t,{headers:{"Content-Type":s}});console.log("[Preview Service] Save preview file",r,n),await i.put(r,n)}}(new l).register()})()})();