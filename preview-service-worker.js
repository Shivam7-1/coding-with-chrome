/*! For license information please see preview-service-worker.js.LICENSE.txt */
(()=>{"use strict";class e{constructor(e,t,i,s){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";if(this.target=null,this.type=t,this.listener=i,this.options=s,"string"==typeof e||e instanceof String){if(this.target=document.getElementById(n+e),!this.target)throw new Error(`Unable to find element ${n}${e}!`)}else this.target=e;if(!this.target)throw new Error(`Undefined event target: ${this.target}!`);if("function"!=typeof i)throw new Error(`Listener is not a function: ${i}!`)}}class t{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Events",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;this.name=e||"",this.prefix=t||"",this.scope=i,this.listener_=[]}listen(t,i,s){let n=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const h=new e(t,i,this.scope?s.bind(this.scope):s,{capture:n,once:r,passive:o},this.prefix);return h.target?(h.target.addEventListener(h.type,h.listener,h.options),this.listener_.push(h)-1):(console.warn("Unable to find event target: ",t),null)}listenOnce(e,t,i){let s=arguments.length>3&&void 0!==arguments[3]&&arguments[3],n=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return this.listen(e,t,i,s,n,r)}unlisten(e){const t=this.listener_[e];if(!t)throw new Error(`Unknown listener key: ${e}!`);const{target:i,type:s,listener:n,options:r}=t;i.removeEventListener(s,n,r),delete this.listener_[e]}getLength(){return this.listener_.length-1}}const i="install",s="activate",n="fetch",r=location.host.endsWith(".github.io")?location.pathname:"/",o="PreviewCache";class h{constructor(){this.prefix="[Preview Service]",this.events=new t("Service Worker: Preview","",this),this.registered=!1,this.allowList=location.host.endsWith(".github.io")?/^(http|https):\/\/([^/]+)\/([^/]+)\/preview\/[^/]+\/?/:/^(http|https):\/\/([^/]+)\/preview\/[^/]+\/?/,this.counter=0}register(){this.registered?console.warn(`${this.prefix} Service Worker is already registered !`):(console.log(`${this.prefix} Add event listener ...`),this.events.listen(self,s,this.activate),this.events.listen(self,i,this.install),this.events.listen(self,n,this.fetch),this.registered=!0,console.log(`${this.prefix} Registered Service Worker with cache ${o} ...`))}activate(e){console.log(`${this.prefix} Activate Service Worker ...`,e)}install(){console.log(`${this.prefix} Install Service Worker ...`)}fetch(e){if(null!=e.request&&this.allowList.test(e.request.url))if("POST"===e.request.method)e.respondWith(caches.open(o).then((t=>e.request.text().then((i=>{const s=new Response(i);return t.put(e.request,s.clone()),s})))));else if("GET"===e.request.method){if(e.request.url.endsWith(r+"preview/test123"))return void e.respondWith(new Response("Hello World! "+this.counter++));e.respondWith(caches.match(e.request).then((e=>e||new Response("Not found"))))}}static async saveHTMLFile(e,t){return h.saveFile(e,t,"text/html; charset=utf-8")}static async saveFile(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"text/plain; charset=utf-8";e.startsWith(r+"preview/")||(e=e.startsWith(r)?e.slice(r.length)+r+"preview"+e:r+"preview/"+e);const s=await caches.open(o),n=e,h=new Response(t,{headers:{"Content-Type":i}});console.log("[Preview Service] Save preview file",n,h),await s.put(n,h)}}(new h).register()})();